public class VIA {
	byte PORTA = 0x00;
	byte PORTB = 0x00;
	byte DDRA = 0x00;
	byte DDRB = 0x00;
	byte PCR = 0x00;
	byte IFR = 0x00;
	byte IER = 0x00;

	String sdByte = "";
	byte[] sdCommand = {0x00,0x00,0x00,0x00,0x00,0x00};
	byte[] sdResponse = {0x00};
	int sdResponseIndex = 0;
	int sdResponseCount = 0;
	int sdCommandIndex = 0;

	public static byte[] hexStringToByteArray(String s) {
		int len = s.length();
		byte[] data = new byte[len / 2];
		for (int i = 0; i < len; i += 2) {
			data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4)
								+ Character.digit(s.charAt(i+1), 16));
		}
		return data;
	}
	
	public byte read(short address) {
		switch (Short.toUnsignedInt(address)-Bus.VIA_ADDRESS) {
			case 0x000:
				IFR &= (byte)(0b01100111);
				PORTB = EaterEmulator.lcd.read((PORTA & 0x20) != 0);
				return PORTB;
			case 0x001:
				IFR &= (byte)(0b01111100);
				return PORTA;
			case 0x002:
				return 0;
			case 0x003:
				return 0;
			case 0x00C:
				return PCR;
			case 0x00D:
				return IFR;
			case 0x00E:
				return IER;
		}
		return 0;
	}

	private static Boolean isBitSet(byte b, int bit){
		return (b & (1 << bit)) != 0;
	}

	public void write(short address, byte data) {
		switch (Short.toUnsignedInt(address)-Bus.VIA_ADDRESS) {
			case 0x000:
				PORTB = data;
				if ((PORTA&0x80)==0x80 && (PORTA&0x40)==0x00) {
					EaterEmulator.lcd.write((PORTA&0x20)==0x20, (byte)(PORTB&DDRB));
				}
				break;
			case 0x001:
				PORTA = data;
				
				boolean SD_CS = (PORTA&0x10)==0x10;
				boolean SD_SCK = (PORTA&0x08)==0x08;
				boolean SD_MOSI = (PORTA&0x04)==0x04;
				boolean SD_MISO = (PORTA&0x02)==0x02;

				if(SD_SCK && !SD_MISO && !SD_CS){

					sdResponseIndex = 0;

					if(sdCommand[0] == (byte)0x51){
						if(sdResponseCount >= 8){
							sdResponseIndex = sdResponseCount - 8;
						}
					}

					PORTA = (byte)0x00;	
					if(isBitSet(sdResponse[sdResponseIndex],7-sdByte.length())){
						PORTA = (byte)0x03;
					}

					if(SD_MOSI){
						sdByte += "1";
					}else{
						sdByte += "0";					
					}
															
					if(sdByte.length() == 8){						
						sdResponseCount += 1;
					}					
				}							

				if(sdByte.length() == 8){										
								
					Integer byteAsInt = Integer.parseInt(sdByte,2);

					if(byteAsInt < 255){

						// Reset
						if(sdCommandIndex == 6){
							System.out.println("");
							sdResponseCount = 0;
							sdResponseIndex = 0;
							sdCommandIndex = 0;
							sdResponse = new byte[] {0x00};
						}						
						
						sdCommand[sdCommandIndex] = byteAsInt.byteValue();
						sdCommandIndex += 1;

						// Setup response
						if(sdCommandIndex == 6){							
							if(sdCommand[0] == (byte)0x40 || sdCommand[0] == (byte)0x48 || sdCommand[0] == (byte)0x77){
								sdResponse = new byte[] {0x01};								
							}
						}

					}else{
						System.out.println(" Sent Response "+sdResponseCount+": "+
							ROMLoader.byteToHexString(sdResponse[sdResponseIndex]) + " "
						);		
					}

					if(sdCommand[0] == (byte)0x51){			
						if(sdResponseCount == 6){
							sdResponse = new byte[] {(byte)0xFE};
						}			
						if(sdResponseCount == 7){
							sdResponse = new byte[] {	
								0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
								0x02, 0x01, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
								0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
								0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
								0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
								0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
								0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
								0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
								0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
								0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
								0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
								0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
								0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
								0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
								0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
								0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
								0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
								0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
								0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
								0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
								0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
								0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
								0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
								0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
								0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
								0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
								0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
								0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
								0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
								0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
								0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
								0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
								0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
								0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
								0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
								0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
								0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
								0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
								0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
								0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
								0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
								0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
								0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, (byte)0xAA
							};
						}
					}						

					System.out.print(Integer.toHexString(byteAsInt)+" ");						

					sdByte = "";
				}		

				if ((PORTA&0x80)==0x80 && (PORTA&0x40)==0x00) {
					EaterEmulator.lcd.write((PORTA&0x20)==0x20, (byte)(PORTB&DDRB));				
				}

				break;
			case 0x002:
				DDRB = data;
				break;
			case 0x003:
				DDRA = data;
				break;
			case 0x00C:
				PCR = data;
				break;
			case 0x00D:
				IFR = data;
				break;
			case 0x00E:
				IER = data;
				break;
		}
	}
	
	public void CA1() {
		if ((IER &= (byte)(0b00000010)) == 0b00000010) {
			IFR |= (byte)(0b10000010);
			EaterEmulator.cpu.interruptRequested = true;
		}
	}
	
	public void CA2() {
		if ((IER &= (byte)(0b00000010)) == 0b00000001) {
			IFR |= (byte)(0b10000001);
			EaterEmulator.cpu.interruptRequested = true;
		}
	}
	
	public void CB1() {
		if ((IER &= (byte)(0b00000010)) == 0b00010000) {
			IFR |= (byte)(0b10010000);
			EaterEmulator.cpu.interruptRequested = true;
		}
	}
	
	public void CB2() {
		if ((IER &= (byte)(0b00000010)) == 0b00001000) {
			IFR |= (byte)(0b10001000);
			EaterEmulator.cpu.interruptRequested = true;
		}
	}
}